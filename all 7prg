6.KNAPSACK PROBLEM
import java.util.Scanner;  
public class Main{
static int n,m;
static float p[],w[];
static void greedy(float p[], float w[],float m,int n)
{
    float max,u=m,profit=0;
    int k=0,i;
    System.out.println("Items included is ");
    for(i=1;i<=n;i++)
    {
        max=0;
        for(int j=0;j<n;j++)
        {
            if((p[j])/w[j]>max)
            {
                k=j;
                max=p[j]/w[j];
            }
        }
        if(w[k]>u){
            System.out.println((k+1)+" Item is selected.");
            System.out.println("Fraction selected is "+u/w[k]);
            profit+=(p[k]*u/w[k]);
        }
        else{
            System.out.println((k+1)+" Item is selected.");
            System.out.println("Fraction selected is 1");
            u=u-w[k];
            profit+=p[k];
            p[k]=0;
        }
    }
    System.out.println("Knapsack profit is "+profit);
}
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the no. of items:");
        n=sc.nextInt();
        p=new float[n];
        w=new float[n];
        System.out.println("Enter the weights of n items:");
        for(int i=0;i<n;i++)
            w[i]=sc.nextFloat();
        System.out.println("Enter the profits of n items:");
        for(int i=0;i<n;i++)
            p[i]=sc.nextFloat();
        System.out.println("Enter capacity:");
            m=sc.nextInt();  
            greedy(p,w,m,n);
    }
}




-------------------------------
7.KRUSKAL ALG
import java.util.Scanner;
public class Main {
	static void kruskal(int cost[][],int n)
	{
                int[] par = new int[n];
		for(int i=0; i<n; i++)
			par[i]=-1;
		int a=0,b=0,u=0,v=0,min, mincost = 0, ne = 0;
		while(ne < n-1)
		{
			min = Integer.MAX_VALUE;
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<n; j++)
				{
					if(cost[i][j] < min)
					{
						min=cost[i][j];
						a=u=i;
						b=v=j;
					}
				}
			}
			while(par[u]!=-1)
				u=par[u];
			while(par[v]!=-1)
				v=par[v];
			if(u!=v)
			{

				System.out.println("Cost of Laying road from town "+ a +" to town " + b +" is "+
				                   min +" Lakhs");
				mincost+=min;
				if(u<v)
					par[v]=u;
				else
					par[u]=v;
				ne++;
			}
			cost[a][b]=cost[b][a]=Integer.MAX_VALUE;
		}
		System.out.println();
		System.out.println("Cost of Laying entire Road Network ="+mincost+ " Lakhs");
	}
	public static void main(String[] args)
	{
		int n;
		Scanner s = new Scanner(System.in);
		System.out.println("Enter the no. of towns");
		n = s.nextInt();
		int[][] c = new int[n][n];
		System.out.println("Enter the cost of laying roads between two towns in lakhs");
		for(int i=0; i<n; i++)
		{
			for(int j=0; j<n; j++)

			{
				c[i][j]=s.nextInt();
				if (c[i][j] == 0)
					c[i][j] = Integer.MAX_VALUE;
			}
		}
		kruskal(c,n);
	}
}


-------------------------------
8.DIJKSTRA ALG
import java.util.Scanner;
public class Main {
	static int min(int m, int n)
	{
		return(( m < n) ? m: n);
	}

	static void dijkstra(int cost[][],int source,int n)
	{
		int[] tvertex=new int[n];
		int dist[]=new int[n];
		int min,u=0,v,i,j;
		System.arraycopy(cost[source], 0, dist, 0, n);
		tvertex[source] = 1;
		dist[source] = 0;
		for(i=0; i < n-1; i++)
		{
			min = Integer.MAX_VALUE;
			for( j = 0; j < n; j++)
			{
				if (tvertex[j] == 0 && dist[j]<min)
				{
					min = dist[j];
					u = j;
				}
			}
			tvertex[u]=1;
			for(v=0; v<n; v++)
			{
				if(tvertex[v]==0 && cost[u][v]!=Integer.MAX_VALUE)
				{
					dist[v]= min(dist[v],dist[u]+cost[u][v]);
				}
			}
		}
		System.out.println(" The shortest travel time ");
		for(v=0; v<n; v++)
			System.out.println("from "+source+" city to "+v+" city is " + dist[v]);
	}
	public static void main(String[] args)
	{
		int n,source;
		Scanner s = new Scanner(System.in);
		System.out.println("Enter the no. of towns");
		n= s.nextInt();
		int[][] c = new int[n][n];
		System.out.println("Enter the cost of laying roads between two towns in lakhs");
		for(int i=0; i<n; i++)
		{
			for(int j=0; j<n; j++)
			{
				c[i][j]=s.nextInt();
				if (c[i][j] == 0)
					c[i][j] = Integer.MAX_VALUE;
			}
		}
		System.out.println("Enter source city");
		source= s.nextInt();
		dijkstra(c,source,n);
	}
}


-----------------------------
9.FLOYDS ALGO.
import java.util.Scanner;
public class Main {
	static int min(int a, int b)
	{
		return(( a < b) ? a: b);
	}
	static void floyd(int D[][],int n)
	{
	    for(int k=0; k<n;k++)
	       for(int i=0; i<n;i++)
	          for(int j=0; j<n;j++)
	              D[i][j]=min(D[i][j], D[i][k]+D[k][j]);
	    
	}
	public static void main(String[] args)
	{
		int n;
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the no. of stations");
		n= sc.nextInt();
		int[][] c = new int[n][n];
		System.out.println("Enter cost matrix:");
		for(int i=0; i<n; i++)
		{
			for(int j=0; j<n; j++)
			{
				c[i][j]=sc.nextInt();
				if(c[i][j]==0 && i!=j)
				     c[i][j]=999;
			}
		}
		floyd(c,n);
		System.out.println("Shortest travel time between all stations:");
		for(int i=0; i<n; i++)
		{
			for(int j=0; j<n; j++)
			
				System.out.print(c[i][j]+" ");
			
			System.out.println();
		}
	}
}



-------------------------------------
10. KNAPSACK USING DYNAMIC PROG.
import java.util.*;
public class Main
{
	static int n, m, p[], w[];
	static void knapsackDP()
	{
		int[][] v= new int[n+1] [m + 1] ;

		for(int i = 0 ; i<=n; i++)
		{
		    for (int j = 0; j<=m; j++)
		    {
		          if(i==0 || j==0)
                               v[i][j] = 0;
                          else if (j<w[i])
				v[i][j] = v[i - 1][j] ;
			  else
				v[i][j]=max( v[i - 1][j],p[i]+v[i-1][j-w[i]]);
		     }
		}
		for(int i = 0 ; i<=n; i++)
		{
			for(int j = 0 ; j<=m; j++)
				System.out.print(v[i][j]+" ");
			System.out.println();
		}
		System.out.println("OPTIMAL PROFIT IS: "+v[n][m]);
		System.out.print("Products selected for shelf that yields maximum profit are:");
		while(n!=0)
		{
			if (v[n] [m] != v [n-1][m])
			{
			    System.out.print(n + " ");
                            m = m -w[n];
			}
			n--;
		}
	}
	static int max(int a, int b)
	{
		return (a>b?a:b);
	}
	public static void main(String[] args)
	{
		Scanner s= new Scanner(System.in);
		System.out.println("Enter the no. of products");
		n=s.nextInt();
		p =  new int [n + 1] ;
		w =  new int [n + 1] ;
		System.out.println("Enter the weights of n products");
		for(int i = 1 ; i<=n; i++)
			w[i]=s.nextInt();
		System.out.println("Enter the profits of n products");
		for(int i = 1 ; i<=n; i++)
			p[i]=s.nextInt();
		System.out.println("Enter the capacity of shelf (Knapsack)");
		m=s.nextInt();
		knapsackDP();
	}
}


-----------------------------------
11.SUBSET SUM PROBLEM
import java.util.Scanner;
public class Main
{
    static int x[],w[],count,d;
    
    static String[] categories;
    static void sum_of_subset(int s,int k,int rem)
    {
        x[k]=1;
        if(s+w[k]==d)
        {
            System.out.println("Subset/event Planning=" + ++count);
            for(int i=0;i<=k;i++)
            {
                if(x[i]==1)
                System.out.println(categories[i]+":"+w[i]);
            }
            System.out.println();
        }
        else if(s+w[k]+w[k+1]<=d)
        {
            sum_of_subset(s+w[k],k+1,rem-w[k]);
        }
        if((s+rem-w[k]>=d) && (s+w[k+1])<=d)
        {
            x[k]=0;
            sum_of_subset(s,k+1,rem-w[k]);
        }
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int sum=0,n;
        System.out.println("Enter no. of categories:");
        n=sc.nextInt();
        w= new int[n];
        x= new int[n];
        categories=new String[n];
        sc.nextLine();
        System.out.println("Enter category");
        for(int i=0;i<n;i++){
            System.out.println("Category "+(i+1)+"name: ");
            categories[i]=sc.nextLine();;
            System.out.println("Category "+(i+1)+"budget: ");
            w[i]=Integer.parseInt(sc.nextLine());
            sum+=w[i];
        }
        System.out.println("Enter budget");
        d=sc.nextInt();
        if((sum<d)|| (w[0]>d))
             System.out.println("No");
        else
             sum_of_subset(0,0,sum);
    }
}


---------------------------------------------
12. HAMILTONIAN CIRCUIT
import java.util.Scanner;
public class Main
{
	static int a[][],n,source;
	static void path(int succ[])
	{
		System.out.print(source+"->");
		for(int j=succ[source]; j!=0; j=succ[j])
			System.out.print(j + "->");
		System.out.println(source);
	}
	static void ckt(int st,int succ[],int visited)
	{
		int[] temp=new int[n];
		if(visited==n && a[st][source]==1)
		{
			path(succ);
			return;
		}
		for(int i=0; i<n; i++) {
			if(a[st][i]==1 && succ[i]==0)
			{
				succ[st]=i;
				System.arraycopy(succ, 0, temp, 0, n);
				ckt(i,temp,visited+1);
			}
		}
	}
	public static void main(String[] args)
	{
		Scanner s = new Scanner(System.in);
		System.out.println("Enter the no. of delivery locations in a city/vertices");
		n = s.nextInt();
		int[] succ=new int[n];
		a = new int[n][n];
		System.out.println("Enter the roads between delivery locations/adjacency matrix");
		for(int i=0; i<n; i++) {
			for(int j=0; j<n; j++) {
				a[i][j]=s.nextInt();
			}
		}
		System.out.println("Routes for delivery vehicle/Hamiltonian circuits");
		ckt(source=0,succ,1); 
	}
}
